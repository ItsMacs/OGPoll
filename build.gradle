plugins {
    id 'com.gradleup.shadow' version '8.3.0'
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'eu.macsworks'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }

    maven {
        url 'https://repo.xenondevs.xyz/releases'
    }

    maven {
        url "https://repo.codemc.io/repository/maven-snapshots/"
    }

    maven { url 'https://repo.papermc.io/repository/maven-public/' }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    testImplementation 'org.mockbukkit.mockbukkit:mockbukkit-v1.21:4.46.0'

    compileOnly("org.spigotmc:spigot-api:1.21-R0.1-SNAPSHOT")
    implementation("co.aikar:acf-bukkit:0.5.1-SNAPSHOT")
    implementation("xyz.xenondevs.invui:invui:1.45")
    implementation("org.mongodb:mongodb-driver-sync:5.0.1")

    implementation("net.wesjd:anvilgui:1.10.5-SNAPSHOT")

    //Lombok stuff
    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")

    testCompileOnly("org.projectlombok:lombok:1.18.38")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.38")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()

    maxHeapSize = '1G'

    testLogging {
        events "passed"
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }

    options.fork = true
    options.forkOptions.executable = System.getProperty("java.home") + "/bin/javac"
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    relocate('co.aikar.commands', 'eu.macsworks.ogpoll.libraries.acf')
    relocate('co.aikar.locales', 'eu.macsworks.ogpoll.libraries.locales')
    relocate('net.wesjd.anvilgui', 'eu.macsworks.ogpoll.libraries.anvilgui')
}
